vi .bash_history 
yum remove xagt
service xagt status
cd /opt/
ls
passwd 
exit
vi /etc/pam.d/password-auth 
vi /etc/pam.d/system-auth 
passwd 
cd /etc/yum.repos.d/
ls
cat *
cat redhat.repo 
yum repolist all
yum update
yum update --allowerasing
yum upgrade --allowerasing
yum upgrade --allowerasing --nobest
cat /etc/redhat-release 
yum repolist all
ls /etc/yum.repos.d/
yum update
yum update --allowerasing
yum update --allowerasing --nobest
yum update --allowerasing --nobest --best
yum update --allowerasing --best
yum update --skip-broken --best
yum update --allowerasing
yum update --allowerasing --nobest
yum update perl-interpreter
yum upgrade perl-interpreter
yum upgrade perl-interpreter --allowerasing
yum update
yum update cockpit-bridge-276.1-1.el8.x86_64
yum upgrade cockpit-bridge-276.1-1.el8.x86_64 --allowerasing
yum update
istory
history\
history
exit
cd /etc/yum.repos.d/
ls
cat RHELOS-8.repo 
vi RHELOS-8.repo 
yum clean all
passwd 
shutdown
cd /etc/yum.repos.d/
ls
ip a
cd /etc/yum.repos.d/
ls
vi RHELOS-8.repo 
passwd
sync
cd /etc/yum.repos.d/
ls
vi RHELOS-8.repo 
yum clean all
yum update
yum upgrade
reboot
ll
free -h
ll
mkdir root/tmp
mkdir -p root/tmp
cd ./root/tmp
curl -L -o SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip --cookie "SPHERESESSID=c998e3af27bcf999f86fb0e4e574cfae" https://support.axway.com/en/downloads/download/id/1462446
ll
dnf update -y
ls
yum install glibc glibc-langpack-en libxml2 libxslt libaio zlib -y
yum install glibc.i686 zlib.i686 libaio numactl perl-Data-Dumper perl-Getopt-Long ncurses-compat-libs -y
cd /usr/lib64 
ln -s libtinfo.so.6.1 /usr/lib64/libtinfo.so.5
ls
 ln -s libncurses.so.6.1 /usr/lib64/libncurses.so.5
cd /root
ll
cd ./root
ls
pwd
cd ./tmp
mkdir /root/Axway
net.core.rmem_max=12852000
ll
sysctl -w file-max=65536
unzip SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip 
ll
./setup.sh -m console
yum install glibc.i686 zlib.i686 libaio numactl perl-Data-Dumper perl-Getopt-Long ncurses-compat-libs
export INSTALL_CRON=false
vi /etc/security/limits.conf
vi /etc/sysctl.conf
sysctl -p
check ip same
check ip 
nslookup 10.128.150.67
dnf install -y glibc.i686 zlib.i686 libaio numactl perl-Data-Dumper perl-Getopt-Long ncurses-compat-libs
export INSTALL_CRON=false
vi /etc/security/limits.conf
sysctl -w fs.file-max=65536
sysctl -w net.core.rmem_max=2096304
sysctl -w net.core.wmem_max=2096394
sysctl -a | grep net.ipv4.tcp_moderate_rcvbuf=1
sysctl -p
cd /root/Axway/SecureTransport/bin
ps -ef | grep Secure
./stop_all
ps -ef | grep Secure
./start_all
cd ..
ls
nano ./lib/admin/config/servers
cat ./lib/admin/config/servers
ll
cat req.sh
sudo ./req.sh
ll
sudo ./req.sh
chmod 777 req.sh 
sudo req.sh
./req.sh
nano /etc/sysctl.conf
nano /etc/security/limits.conf
ps -ef | grep Secure
cd /root/Axway/SecureTransport/bin
./stop_all
ps -ef | grep Secure
./start_all
dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
echo "root:754" | chpasswd
passwd
pwd
ps -ef | grep Secure
./stop_all
ps -ef | grep Secure
./start_all
cd /root/Axway/SecureTransport/bin
./stop_all
cd ..
ls
tree . -L 2
cd ./bin
ps -ef | grep Secure
./start_all
ps -ef | grep Secure
cd ../var/tmp
ll
cat cluster_last_sync_timestamp 
cat cluster_state 
cd ../..
nano ./lib/admin/config/servers
nano /root/Axway/SecureTransport/lib/admin/config
nano /root/Axway/SecureTransport/lib/admin/config/servers
cd /root/Axway/SecureTransport/bin
./stop_all
./start_all
cd ./Axway/SecureTransport/var/tmp
cat ./cluster_last_sync_timestamp 
ll
cat ./cluster_state 
code
cd ../
cd ./bin
./stop_all
./start_all
cd /root/Axway//SecureTransport/bin/
./stop_all
cd /
mkdir Lec_MSSQL
ll
cd /root
ll
cd /Ax
cd ./Axway/
ll
cd ..
ll
cd ./root
ll
cd ./tmp
cp SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip /Lec_MSSQL/
cd /Lec_MSSQL/
ll
unzip SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip 
ll
./setup.sh -m console
pwd
ll
./setup.sh -m console
ll
pwd
mv SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip ../
ll
rm -rf *
ll
cd ..
mv SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip ./Lec_MSSQL/
cd -
ll
unzip SecureTransport_5.5-20231221_Install_linux-x86-64_BN3202.zip 
ll
./setup.sh -m console
ps -ef | grep Secure
ps -ef | grep Secure
cd /root/Lec_MSSQL/
cat install.log
pwd
ll
rm -rf *
ll
pwd
ps -ef | grep Secure
cd /root/Axway/SecureTransport/
cd ./bin
ps -ef | grep Secure
./stop_all
ps -ef | grep Secure
cd /
cd /root
cd ./Lec_MSSQL/SecureTransport/bin
./stop_all
ps -ef | grep Secure
kill -9 188585 190622 191852 192406 192413
ps -ef | grep Secure
pwd
cd /root/Axway/SecureTransport/bin
]./start_all
./start_all
ps -ef | grep Secure
netstat -an | grep 444
pwd
./stop_all
pwd
ps -ef | grep Secure
ps -ef | grep -i Secure
cd ../var/tmp
ll
rm -rf *
cd ../run
ll
rm -rf *
cd ../bin
cd ../../bin
./start_db
./start_admin
./stop_all
./start_all
netstat -an | grep 444
./stop_all
./start_all
ps -ef |grep -i secure
cd Axway/SecureTransport/bin/
./stop_all 
touch update.sh
chmod 777 update.sh
code update.sh
sestatus
code /etc/selinux/config
locale
localectl status
sudo systemctl edit st.service
./update.sh
code /etc/limits.conf
sudo systemctl edit --force stnode.service
ps -ef | grep Secure
systemctl list-units --type=service | grep -i st
sestatus
code /etc/selinux/config
reboot
cd /usr/lib
ll
ll | grep jvm
cd /root/Axway/
ll
./update.sh -i /root/tmp/UpdateStep2/SecureTransport-Update-5.5-20241219-3217-allOS.jar
java -version
cd /root/Axway/Java
ll
cd ./linux-x86/
ll
cd ./jre11_u11.0.21_9_64/
ll
java -version
cd ./bin
java -version
ll
java -version
java 
./java
./java -version
cd ..
ll
cd..
cd ..
ll
sestatus
sudo systemctl edit st.service
sudo systemctl edit --force securetransport_db.service
sudo systemctl daemon-reexec
sudo systemctl restart securetransport_db.service
ps -ef | grep Secure
kill -9 7596 7841 7925
ps -ef | grep Secure
code /etc/systemd/system.conf
code /etc/systemd/user.conf
sudo systemctl daemon-reexec
cd /etc/security/limits.d
ll
code 99-securetransport.conf
ll
systemctl show securetransport_db.service | egrep "LimitNOFILE|LimitNPROC|LimitMEMLOCK|TasksMax"
cd /
ll
cd /root
ll
cd ./Axway
ll
cd ..
cd ./root
ll
cd ./tmp
ll
cd /
cd ~
ll
ps -ef | grep Secure
ll
mkdir tmp
cd ./tmp
ll
curl -L -o SecureTransport_5.5-20241219_Update_allOS_BN3217.zip --cookie "SPHERESESSID=6f30e15bc15cc156da789ca27e7c5ce1" https://support.axway.com/en/downloads/download/id/1469575
ll
cd ..
chmod 777 tmp
cd ./tmp
pwd
ll
unzip SecureTransport_5.5-20241219_Update_allOS_BN3217.zip 
ll
tree .
cd /root/Axway
tail -f install.log
ps -ef | grep Secure
cd /root/Axway/SecureTransport/var/run
ll
ll
sestatus
cd /root/Axway
ll
./update.sh -i /root/tmp/UpdateStep1/AxwayInstaller-5.0.52-UP-allOS.jar
./update.sh -i /root/tmp/UpdateStep2/SecureTransport-Update-5.5-20241219-3217-allOS.jar
lsof -i :444
cd ./SecureTransport/bin
./stop_all
./start_all
lsof -i :444
ll
cd /root
ll
cd ./Lec_MSSQL/
ll
ps -ef | grep Secure
./stop_all
ll
cd ./Lec_MSSQL/
ll
cd ..
cd /root
ll
cd ./Axway/
ll
cd ..
cd ./Lec_MSSQL/
ll
nc -zv 10.128.144.225 1433
/opt/mssql-tools/bin/sqlcmd -S 10.128.144.225,1433 -U sa -P 'Secret123!'
cd ./SecureTransport/bin
./start_all
ps -ef | grep Secure
kill -9 43354 
ps -ef | grep Secure
./start_all
lsof -i :
lsof -i :444
ll
cd /root
ll
cd ./root
ll
cd ..
cd ./Lec_MSSQL/
cd ./SecureTransport/var/run
ll
rm -rf *
cd /
cd /root
ll
dnf install -y pv
cd /root && tar -czvf LecMSSQL_backup_$(date +%F).tar.gz Lec_MSSQL
ll
sudo systemctl edit --force stnode.service
sudo systemctl daemon-reexec
docker
pwd
cd ./tmp
tree .
cd ..
ll
cd ./Lec_MSSQL/
ll
tail -f install.log
find . -type d -name Axway
ll
cd /root
ll
cd ./Lec_MSSQL/
ll
pwd
ll
ps -ef | grep Secure
./update.sh -i /root/tmp/UpdateStep1/AxwayInstaller-5.0.52-UP-allOS.jar
./update.sh -i /root/tmp/UpdateStep2/SecureTransport-Update-5.5-20241219-3217-allOS.jar
ps -ef | grep Secure
lsof -i :444
cd ./SecureTransport/bin
./stop_all
ps -ef | grep Secure
lsof -i :444
lsof -i :80
telnet 10.128.144.225 1433
dnf install telnet
telnet 10.128.144.225 1433
ps -ef | grep Secure
cd ./Lec_MSSQL/SecureTransport/bin
./stop_all
ps -ef | grep Secure
kill -9 45051 45555 54282 54443 54446 54447 209009 209010 209200
ps -ef | grep Secure
kill -9 45573 209239
ps -ef | grep Secure
pwd
ll
mkdir rsync
ll
rsync
cd ./rsync/
ll
cd ..
ll
cd ./r
cd ./rsync/
ll
echo "FFF" > f.txt
ll
rsync -av root@10.128.144.225:/root/rsync .
ll
cd ./rsync
ll
ps -ef | grep Secure
cd /root
ll
cd ./Axway/SecureTransport/bin
./start_all
ll | grep xml_export
./xml_export 
pwd
./xml_export > exports_data.xml
tail exports_data.xml 
rm exports_data.xml 
tail exports_data.xml 
pwd
touch export_accounts.xml
./xml_export export_accounts.xml 
find . -type d -name bin
cd ..
find . -type d -name bin
cd -
ll
pwd
ls
htop
ps -ef | grep Secure
kill -9 1675 1823
cd /root/Axway/SecureTransport/bin
ll
./start_all
pwd
cd /root
ll
cd /root/Axway/SecureTransport/bin
ll | grep rest
touch restart.sh
chmod restart.sh
chmod 777 restart.sh
code restart.sh 
code
htop
cd /home/st/users
ll
tree .
cd /root
find / -type d | xargs tree . > output.log
code output.log 
ls -ltrh
tail -f output.log
cat output.log | wc
rm output.log 
docker
htop
cd /root/Axway/SecureTransport/bin
code
code restart.sh 
ps -ef | grep Secure

./restart.sh 
lsls
ls
./stop_all
ps -ef | grep Secure
kill -9 12827 12877
ps -ef | grep Secure
cd ~
ls
cd ./tmp
ls
touch dockerInstall.sh
chmod 777 dockerInstall.sh 
code dockerInstall.sh 
./dockerInstall.sh 
docker ps
ll
cd ~
ll
docker ps
docker images
docker pull redis
docker ps
docker run 
docker run -p6000:6379 redis
docker ps
docker images
docker logs redis
docker logs b39b4cfef1fd
docker logs vibrant_colden 
docker exec vibrant_colden 
docker exec vibrant_colden  ls
docker exec vibrant_colden  pwd
docker exec vibrant_colden  tree .
docker exec -it vibrant_colden 
docker exec -it vibrant_colden /bin/bash
code .bash_history 
timedatectl set-timezone Asia/Kolkata
# Automatic time-date syncing
timedatectl set-ntp true
# Increasing histroy file storage capacity
echo "export HISTCONTROL=ignoreerr" >> ~/.bashrc
echo "HISTFILESIZE=100000000" >> ~/.bashrc
echo 'PROMPT_COMMAND="history -a; $PROMPT_COMMAND"' >> ~/.bashrc
source ~/.bashrc
free -h
timedatectl
cat /etc/os-release
whoami
uptime
uptime -p
echo "Script Execution Finished"
ls -a
docker network ls
docker ps
code .bashrc 
ls
pwd
ll
htop
stat -c %Y ~/.bash_history
stat ~/.bash_history
date -d @1757476993
cd /etc/
ll
ll | grep service
code services 
cd /root/Axway/SecureTransport/bin
./restart.sh 
htop
pwd
cd /root/Axway/SecureTransport/bin
node
./stop_all
curl -LsS https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
source ~/.bashrc
nvm alias default 24.7.0
node -v
npm -v
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
nvm --version
nvm install 24.7.0
nvm use 24.7.0
nvm alias default 24.7.0
node -v
npm -v
node
cd /root/project/node
ll
unzip Prototype.zip 
cd ./Prototype/
ll
npm init
code -r ./logs/*
node index.js 
git
htop
docker ps
dnf install -y git
docker stop vibrant_colden vibrant_colden 
docker ps
node index.js 
ssh-agent -s
  eval "$(ssh-agent -s)"
cd ~
ls -a
cd .ssh
ll
ssh-keygen -t ed25519 -C "oberoy968@gmail.com"
ls
code id_ed25519.pub 
ssh -T git@github.com
node index.js 
node index.js 
pm2
npm install -g pm2
node index.js
pwd
cd /root/project/node/Prototype
cd ./history/
ll
ls -a
rm -rf .git
ls -a
node index.js
cat .bashrc
exit
npm install -g pm2
pm2
pm2 start index.js --name linux-cmd-history
pm2 startup
pm2 save'
pm2 save
pm2 ls
cd ..
pm2 log
pm2 restart linux-cmd-history
htop
pm2 logs
pm2 list
docker ps -a
docker-compose
cd /tmp
ll
docker network ls
docker compose
systemctl status docker
docker compose up
pm2 log
cd /root/project/node/
ll
cd ./Prototype/
ll
code -r ./logs/*
node ./index.js 
cd ./history/
git status
git log
cd /root/project/node/Prototype/
node index.js 
pm3 restart
pm3 log linux-cmd-history
pm3 log linux-command-history
pm2 log linux-command-history
pm2 list
pm2 restart linux-cmd-history
pm2 log linux-cmd-history
pm2 restart linux-cmd-history
pm2 log linux-cmd-history
pm2 restart linux-cmd-history
pm2 log linux-cmd-history
docker ps
cd /root
ll
cd ./tmp
ll
rm -rf *
ll
touch dockerfile
chmod 777 dockerfile 
code dockerfile 
docker build -t my-app:1.0 .
ll
docker ps
docker images
docker run my-app:1.0
docker ps
docker logs
docker log
docker ps
docker images
docker run my-app
docker run cec289c7fec0
docker ps
docker logs
docker log
docker logs cec289c7fec0
docker ps -a
docker logs 4e80901a66ad
docker start 4e80901a66ad
docker ps
docker logs 4e80901a66ad
docker start -it 4e80901a66ad
docker exec -it 4e80901a66ad /bin/bash
docker images
docker run -it cec289c7fec0 /bin/bash
docker ps
ls
pwd
ls
cd /root/project/node/Prototype/
pm2 list
pm2 restart all
pm2 startup
pm2 save
sytemctl status pm2
sytemctl status pm2.service
systemctl
systemctl status pm2-root
docker login
docker logout
pm2 list
htop
pm2 list
node -v
npm -v
mkdir temp
cd ./temp/
ll
mkdir Client
mkdir Server
cd ./Client/
npm create vite@latest
ll
cd vite-project/
ll
npm install 
npm run dev
npm run dev --host
npm run dev -- --host
npm run dev -- --host 0.0.0.0
vite build
npm run build
find . -type d -name dist
dnf install nginx
cd /etc/nginx/
ll
cd ./conf.d/
ll
touch vite.conf
code vite.conf 
cd ./dist/
pwd
systemctl status nginx
systemctl start nginx
cd /usr/share/nginx/
ll
cd ./html
ll
rm -rf *
ll
pwd
cp -r . /usr/share/nginx/html
ll
cd /etc/nginx/conf.d/
ll
nginx -t
systemctl reload nginx
curl ifconfig.me
syatemctl status firewalld
systemctl status firewalld
sudo ss -tulnp | grep nginx
ifconfig.me
curl ifconfig.me
taif 40 ~/.bash_history
tail 40 ~/.bash_history
cd /etc/yum.repos.d/
ll
touch cloudflare.repo
code cloudflare.repo 
dnf install -y cloudflared
cloudflared --version
cloudflared tunnel --url http://10.128.150.67:80
cloudflared tunnel --protocol http2 http://10.128.150.67:80
cloudflared tunnel --protocol http2 --url http://10.128.150.67:80
curl -vk https://www.cloudflare.com
dnf uninstall cloudflare
rpm -q cloud
rpm -q cloudflare
yum erase cloudflare -y
cloudflare
cloudflared tunnel --protocol http2 --url http://10.128.150.67:80
history | tail -n 50 | grep dnf
dnf remove 
dnf remove cloudflared
history
history | tail -n 50 | grep npm
history | tail -n 250 | grep npm
history | tail -n 250 | grep npm
history | tail -n 5
sleep 40
history | tail -n 5
history | tail -n 5
history : tail -n 5
history | tail -n 5
dnf remove nginx
cd /etc/nginx/
ll
cd ./conf.d/
ll
rm -rf *
ll
cd /
find . -name vite.svg -typr f
find . -name vite.svg -type f
cd /usr/share/
ll
cd ./nginx/
ll
rm -rf *
ll
htop
tail -f history
pwd
tail -f ~/.bash_history 
ls
ls | xargs cat
ip route
curl ifconfig.me
curl -I http:// 91.221.254.6
ip addr show
cd /temp
ll
cd ./Client/
ll
cd ./vite-project/
ll
cd /tmp
ll
rm -rf *
ll
wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip
ll
unzip 
unzip ngrok-stable-linux-amd64.zip 
ll
code ngrok
mv ngrok /usr/local/bin/
ll
ngrok version
ngrok http 5173
ngrok http 5173
ngrok config add-authtoken 32jxLu4GHVRPHryh8bxZ041aUqK_65iqhctNaf7ZCLPLeytmG
npm run dev -- --host 0.0.0.0
ngrok http 5173
tail -n 100 ~/.bash_history
ngrok version
npm run dev -- --host 0.0.0.0
htop
cd /home
ll
cd /root
ll
cd ./project/
ll
cd ./node
ll
rm -f Prototype.zip 
ll
mkdir Messager
cd ./Messager/
ll
git clone -b main https://github.com/JayDevDixit/Messager.git
ll
cd ./Messager/
ll
pwd
cd ..
cd..
ll
cd ..
ll
rm -rf Messager/
ll
git clone -b main https://github.com/JayDevDixit/Messager.git
ll
cd ./Messager/
ll
ls -la
git status
pwd
cd /root/project/node/Messager/cli
cd /root/project/node/Messager/client
/root/project/node/Messager/Server
cd /root/project/node/Messager/Server
npm init
npm install
npm install
ll
ll
ll
cat ~/.bash_history | tail -n 100 | grep --host
cat ~/.bash_history | tail -n 100 | grep '--host'
tail -n 100 ~/.bash_history | grep '--host'
tail -n 100 ~/.bash_history | grep host
tail -n 100 ~/.bash_history | grep '--host'
npm run -- --host 0.0.0.0
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev -- --host 0.0.0.0
npm run dev
uptime
htop
ps -ef | grep npm
npm run dev
npm run dev -- --host 0.0.0.0
cd /root/project/node/Messager
ps -ef | grep npm
cd client/
cd Server/
npm run dev
npm run dev -- --host 0.0.0.0
npm run dev
pwd
env
env | grep pas
env | grep vscode
env | grep code
env | grep ' code '
where code
where
when code
where echo
cd /root
ll
htop
pm2 log
env -i echo "hi"
pwd
console.log('f')
which code
which echo
which code
which echo
which code
code
code
env | grep code
env | grep code
code
env -i echo "hi"
#!/usr/bin/env node
cd /usr/bin/env
cd /usr/bin
bat env
dnf install bat
bat env
word
count
bc
locate
dnf install locate
dnf install plocate
cd /root/project/node/Prototype
ll
node index.js
python3
pip
pip3
pip3 install notebook
dnf install python3-pip -y
pip3 install notebook
python3 -v
dnf module list python3
python -version
python3 -version
python3 --version
dnf module reset python3 -y
dnf module reset python -y
dnf module reset python3.6 -y
dnf module reset python3.6.8 -y
python3 --version
dnf update python3
dnf module enable python3.9 -y
dnf install python39 python39-pip -y
python3.9 --version
pip3.9 --version
pip3.9 install notebook bash_kernel
dnf groupinstall "Development Tools" -y
dnf install gcc gcc-c++ make -y
dnf install python39-devel -y
pip3.9 install notebook bash_kernel
python3.9 -m bash_kernel.install
jupyter notebook -ip=0.0.0.0 --no-browser --port=8888
hostname -i
jupyter notebook -ip=0.0.0.0 --no-browser --port=8888 --allow-root
jupyter notebook --ip=0.0.0.0 --no-browser --port=8888 --allow-root
systemctl status firewalld
clear
ls
pwd
PS1='PROMPT_FVZOVGSJKKOK\[\]>' PS2='PROMPT_FVZOVGSJKKOK\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
pwd
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
ls -ltr
{ echo $?; } 2>/dev/null
cd /root
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
cd /home
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
find . -name mysql
{ echo $?; } 2>/dev/null
sleep 50
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
htop
top
htop
tail ~/.bash_history
tail-n 50  ~/.bash_history
tail -n 50  ~/.bash_history
tail -n 150  ~/.bash_history
PS1='PROMPT_UMYGSHZLJESB\[\]>' PS2='PROMPT_UMYGSHZLJESB\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
tree .
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
cd /root
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
PS1='PROMPT_FYTDGYGNJBPS\[\]>' PS2='PROMPT_FYTDGYGNJBPS\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
dnf install htop
{ echo $?; } 2>/dev/null
tail ~/.bash_history
{ echo $?; } 2>/dev/null
{ echo $?; } 2>/dev/null
{ echo $?; } 2>/dev/null
{ echo $?; }
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
cd /home
{ echo $?; } 2>/dev/null
tree .
{ echo $?; } 2>/dev/null
x = `expr 2 + 5`
{ echo $?; } 2>/dev/null
dup
{ echo $?; } 2>/dev/null
x
{ echo $?; } 2>/dev/null
$x
{ echo $?; } 2>/dev/null
$x
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
jupyter notebook --ip=0.0.0.0 --no-browser --port=8888 --allow-root
ls
pwd
ll
ls
PS1='PROMPT_VJMQGRHVZTUD\[\]>' PS2='PROMPT_VJMQGRHVZTUD\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
cat req.sh
{ echo $?; } 2>/dev/null
bat req.sh
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
cd /home
{ echo $?; } 2>/dev/null
ll
{ echo $?; } 2>/dev/null
ls -ltr
{ echo $?; } 2>/dev/null
ls-ltr | sort
{ echo $?; } 2>/dev/null
ls -ltr | sort
{ echo $?; } 2>/dev/null
tail ~/.bash_history
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
sudo
{ echo $?; } 2>/dev/null
ls -ltr
{ echo $?; } 2>/dev/null
htop
ps -ef | grep htop
{ echo $?; } 2>/dev/null
jupyter notebook --ip=0.0.0.0 --no-browser --port=8888 --allow-root
PS1='PROMPT_CEJBHKYNPBQS\[\]>' PS2='PROMPT_CEJBHKYNPBQS\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
pwd
{ echo $?; } 2>/dev/null
PS1='PROMPT_BWBLYVJZEHCH\[\]>' PS2='PROMPT_BWBLYVJZEHCH\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
compgen -d -S / s
compgen -f s
compgen -abc -A function s
systemctl status auditd
{ echo $?; } 2>/dev/null
compgen -d -S / cd
compgen -f cd
compgen -abc -A function cd
compgen -d -S / c
compgen -f c
compgen -abc -A function c
cd /Axway/
{ echo $?; } 2>/dev/null
compgen -d -S / l
compgen -f l
compgen -abc -A function l
ls
{ echo $?; } 2>/dev/null
compgen -d -S / c
compgen -f c
compgen -abc -A function c
cd ./Axway/
{ echo $?; } 2>/dev/null
compgen -d -S / ls
compgen -f ls
compgen -abc -A function ls
ls
{ echo $?; } 2>/dev/null
compgen -d -S / h
compgen -f h
compgen -abc -A function h
htop
compgen -d -S / f
compgen -f f
compgen -abc -A function f
find . -name bin -type s
{ echo $?; } 2>/dev/null
find . -name bin -type d
{ echo $?; } 2>/dev/null
find . -name bin -type d
{ echo $?; } 2>/dev/null
compgen -d -S / l
compgen -f l
compgen -abc -A function l
ls
{ echo $?; } 2>/dev/null
compgen -d -S / c
compgen -f c
compgen -abc -A function c
PS1='PROMPT_GEMSZIWPLIQS\[\]>' PS2='PROMPT_GEMSZIWPLIQS\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
PS1='PROMPT_SGMWNGPMWAHT\[\]>' PS2='PROMPT_SGMWNGPMWAHT\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
dnf install htop
{ echo $?; } 2>/dev/null
PS1='PROMPT_RTHAWMLFCTFK\[\]>' PS2='PROMPT_RTHAWMLFCTFK\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
PS1='PROMPT_FBEJVDSCOXPU\[\]>' PS2='PROMPT_FBEJVDSCOXPU\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
pwd
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
netstate 80
{ echo $?; } 2>/dev/null
netstat 80
ls -ltr
{ echo $?; } 2>/dev/null
ps -ef | grep jupyter
{ echo $?; } 2>/dev/null
ps -ef > grep jupyter
{ echo $?; } 2>/dev/null
ps -ef >>> grep jupyter
{ echo $?; } 2>/dev/null
ps -ef > echo | grep jupyter
{ echo $?; } 2>/dev/null
ps -ef | echo | grep jupyter
{ echo $?; } 2>/dev/null
ps -ef | grep jupyter
{ echo $?; } 2>/dev/null
ps -ef | grep jupyter | echo
{ echo $?; } 2>/dev/null
echo | ps -ef | grep jupyter
{ echo $?; } 2>/dev/null
echo < ps -ef | grep jupyter
{ echo $?; } 2>/dev/null
echo < <(ps -ef | grep jupyter)
{ echo $?; } 2>/dev/null
echo | <(ps -ef | grep jupyter)
{ echo $?; } 2>/dev/null
echo <(ps -ef | grep jupyter)
{ echo $?; } 2>/dev/null
while read r;do echo $r; done <(ps -ef | grep jupyter)
{ echo $?; } 2>/dev/null
while read r;do echo $r; done | echo <(ps -ef | grep jupyter)
while read r;do echo $r; done | echo | (ps -ef | grep jupyter)
while read r;do echo $r; done |  (ps -ef | grep jupyter)
while read r;do echo $r; done | ps -ef | grep jupyter
echo 'de'
{ echo $?; } 2>/dev/null
ls -ltr
ls -ltr
{ echo $?; } 2>/dev/null
dsa
{ echo $?; } 2>/dev/null
ps -ef | grep htop
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}' | kill -9
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}' | kill
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}' | echo
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
echo | ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
kill | ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
kill -9 | ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
kill 0
{ echo $?; } 2>/dev/null
kill | ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}' | xargs kill -9
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
pkill htop
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}' | xargs kill
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
pkill -9 htop
{ echo $?; } 2>/dev/null
ps -ef | grep htop | awk '{print $2}'
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
|, |
{ echo $?; } 2>/dev/null
cd /etc
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
PS1='PROMPT_DQEYOKINPSZK\[\]>' PS2='PROMPT_DQEYOKINPSZK\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
ls -ltr
{ echo $?; } 2>/dev/null
dnf install htop
{ echo $?; } 2>/dev/null
compgen -d -S / ./Axw
compgen -f ./Axw
compgen -d -S / ./Axway/
compgen -f ./Axway/
compgen -d -S / ./Axway/
compgen -f ./Axway/
compgen -d -S / ./Axway/
compgen -f ./Axway/
compgen -d -S / ./Axway/
compgen -f ./Axway/
compgen -d -S / ./Axway/Se
compgen -f ./Axway/Se
compgen -d -S / ./Axway/SecureTransport/
compgen -f ./Axway/SecureTransport/
compgen -d -S / ./Axway/SecureTransport/
compgen -f ./Axway/SecureTransport/
cd ./Axway/SecureTransport/bin/
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
ls
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
PS1='PROMPT_BGBZXBZCRECL\[\]>' PS2='PROMPT_BGBZXBZCRECL\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
$PROMPT_COMMAND
jupyter notebook --ip=0.0.0.0 --no-browser --port=8888 --allow-root
jupyter notebook --ip=0.0.0.0 --no-browser --port=8888 --allow-root
jupyter notebook --ip=0.0.0.0 --no-browser --port=8888 --allow-root
PS1='PROMPT_MQGIFCZYHAZZ\[\]>' PS2='PROMPT_MQGIFCZYHAZZ\[\]+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved image data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayHTML () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved html data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
displayJS () {     display_id="$1"; shift;     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     prefix="bash_kernel: saved javascript data to: ";     if [[ "${display_id}" != "" ]]; then         echo "${prefix}(${display_id}) $TMPFILE" >&2;     else         echo "${prefix}$TMPFILE" >&2;     fi; }
export NOTEBOOK_BASH_KERNEL_CAPABILITIES="image,html,javascript"
test
{ echo $?; } 2>/dev/null
pwd
{ echo $?; } 2>/dev/null
test -d /root
{ echo $?; } 2>/dev/null
ls /root
{ echo $?; } 2>/dev/null
test -d req.sh
{ echo $?; } 2>/dev/null
test -f req.sh
{ echo $?; } 2>/dev/null
ls -ltr
{ echo $?; } 2>/dev/null
